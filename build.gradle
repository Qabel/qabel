apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

dependencies {
}

class ExecWait extends DefaultTask {
	String command
	String ready
	String directory
	String logname
	Process process
	boolean waitfor

	@TaskAction
	def spawnProcess() {

		ProcessBuilder builder = new ProcessBuilder(command.split(' '))
		builder.redirectErrorStream(true)
		builder.directory(new File(directory))
		builder.redirectOutput(new File("./log/"+logname+".log"))

		process = builder.start()

		InputStream stdout = process.getInputStream()
		BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))

		if(process != null && waitfor==true)
			process.waitFor()
	}
}

task killAllTestProcesses {
    def Platform = "${System.properties['os.name'].toLowerCase()}" 
    
    def ports = [6000, 8000]
    ports.each { port ->
     	if (Platform.contains('linux')){
	        def cmd = "lsof -Fp -i :$port"
	        def process = cmd.execute()
	        process.in.eachLine { line ->
	        	def command = "kill -9 "+line.substring(1)
	        	def killProcess = command.execute()
	            killProcess.waitFor()
	        }
	    }
	    else if(Platform.contains('windows')) {
	        def cmd = "netstat -a -o -n | findstr \"TCP\" | findstr \":$port\""
	        def process = cmd.execute()
	        process.in.eachLine { line ->
	        	def command = "taskkill /F /PID  "+line.split('+ ')[4]
	        	def killProcess = command.execute()
	            killProcess.waitFor()
	        }
	    }

    }
}


task startDropServer(type: ExecWait) {
	command 'python drop_server.py &'
	ready 'Drop server running.'
	directory 'qabel-drop'
	logname 'qabel-drop'
}

task getNodeModules(type: ExecWait) {
	command 'npm install'
	ready 'Storage server modules initialised.'
	directory 'qabel-storage'
	logname 'npm'
	waitfor true
}

task getNodeModule << {
	
}

task checkStorage {
	File dataFolder = new File("./qabel-storage/data/");
	if( !dataFolder.exists() ) {
		dataFolder.mkdirs();
	}
	File nodeModulesFolder = new File("./qabel-storage/node_modules/");
	if( !nodeModulesFolder.exists() ) {
		getNodeModules.execute()
	}
}

task startStorageServer(type: ExecWait) {
	dependsOn 'checkStorage'	
	command 'nodejs app.js &'
	ready 'Storage server running.'
	directory './qabel-storage'
	logname 'qabel-storage'
}

task startServers {
	File logFolder = new File("./log/");
	if( !logFolder.exists() ) {
		logFolder.mkdirs();
	}
	startDropServer.execute()
	startStorageServer.execute()
}

gradle.addListener new TestLifecycleListener()
 
class TestLifecycleListener implements TaskExecutionListener {

    @Override
    void beforeExecute(Task task) {
        if (task.name == 'test') {
              task.project.rootProject.startServers.execute();
        }
    }
 
    @Override
    void afterExecute(Task task, TaskState taskState) {
        if (task.name == 'test') {
           task.project.rootProject.killAllTestProcesses.execute()
        }
    }
}




test {

}


task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

