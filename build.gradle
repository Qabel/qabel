apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

dependencies {
}

class ExecWait extends DefaultTask {
	String command
	String ready
	String directory
	String logname
	Process process
	boolean waitfor

	@TaskAction
	def spawnProcess() {

		ProcessBuilder builder = new ProcessBuilder(command.split(' '))
		builder.redirectErrorStream(true)
		builder.directory(new File(directory))
		builder.redirectOutput(new File("./log/"+logname+".log"))

		process = builder.start()

		InputStream stdout = process.getInputStream()
		BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))

		if(process != null && waitfor==true)
			process.waitFor()
	}
}

2.times { counter ->
    task "killAllTestProcesses$counter" <<{
	    def Platform = "${System.properties['os.name'].toLowerCase()}" 
	    
	    def ports = [6000, 8000]
	    ports.each { port ->
	     	if (Platform.contains('linux')){
		        def cmd = "lsof -Fp -i :$port"
		        def process = cmd.execute()
		        process.in.eachLine { line ->
		        	def command = "kill -9 "+line.substring(1)
		        	def killProcess = command.execute()
		            killProcess.waitFor()
		        }
		        
		    }
		    else if(Platform.contains('windows')) {
		        def cmd = "netstat -a -o -n | findstr \"TCP\" | findstr \":$port\""
		        def process = cmd.execute()
		        process.in.eachLine { line ->
		        	def command = "taskkill /F /PID  "+line.split('+ ')[4]
		        	def killProcess = command.execute()
		            killProcess.waitFor()
		        }
		    }
	    }
	}
}

task checkLogFolder << {
	File logFolder = new File("./log/")
	if( !logFolder.exists() ) {
		logFolder.mkdirs()
	}
}

task getNodeModules(type: ExecWait) {
	command 'npm install'
	ready 'Storage server modules initialised.'
	directory './qabel-storage'
	logname 'npm'
	waitfor true
}

task checkStorage {
	dependsOn 'checkLogFolder'
}

checkStorage << {
	File storagedataFolder = new File("./qabel-storage/data/")
	if( !storagedataFolder.exists() ) {
		storagedataFolder.mkdirs()
	}

	File nodeModulesFolder = new File("./qabel-storage/node_modules/")
	if( !nodeModulesFolder.exists() ) {
		getNodeModules.execute()
	}
}


task startStorageServerUnix(type: ExecWait) {
	dependsOn 'checkStorage'
	def cmd = "./node.sh"
	def process = cmd.execute()
	process.in.eachLine { line ->
		command line+' app.js &'
	}
	ready 'Storage server running.'
	directory 'qabel-storage/'
	logname 'qabel-storage'
}

task startStorageServerWindows(type: ExecWait) {
	dependsOn 'checkStorage'
	command 'node app.js &'
	ready 'Storage server running.'
	directory 'qabel-storage'
	logname 'qabel-storage'
}

task startDropServerUnix(type: ExecWait) {
	dependsOn 'checkLogFolder'
	def cmd = "./drop.sh"
	def process = cmd.execute()
	process.in.eachLine { line ->
		command line+' drop_server.py &'
	}
	ready 'Drop server running.'
	directory 'qabel-drop'
	logname 'qabel-drop'
}

task startDropServerWindows(type: ExecWait) {
	dependsOn 'checkLogFolder'
	command 'python drop_server.py &'
	ready 'Drop server running.'
	directory 'qabel-drop'
	logname 'qabel-drop'
}

task startAccountingServerUnix(type: ExecWait) {
	dependsOn 'checkLogFolder'
	command 'python3.4 manage.py testserver testdata.json --addrport 9696'
	ready 'Accounting server running.'
	directory 'qabel-accounting'
	logname 'qabel-accounting'
}

task startAccountingServerWindows(type: ExecWait) {
	dependsOn 'checkLogFolder'
	command 'python3.4 manage.py testserver testdata.json --addrport 9696'
	ready 'Accounting server running.'
	directory 'qabel-accounting'
	logname 'qabel-accounting'
}
task startServers{
	dependsOn 'checkLogFolder'
	dependsOn 'checkStorage'
}

startServers << {
	def Platform = "${System.properties['os.name'].toLowerCase()}" 
	killAllTestProcesses0.execute()

	if (Platform.contains('windows')){
		startDropServerWindows.execute()
		startStorageServerWindows.execute()
		startAccountingServerWindows.execute()
	}
	else {
		startDropServerUnix.execute()
		startStorageServerUnix.execute()
		startAccountingServerUnix.execute()
	}
}

subprojects {
	apply plugin: 'java'
	test.dependsOn(parent.startServers)
	test.finalizedBy(parent.killAllTestProcesses1)
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

